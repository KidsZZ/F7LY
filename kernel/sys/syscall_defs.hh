#pragma once
namespace syscall
{

    enum SysNum
    {
        SYS_fork = 1,
        SYS_wait = 3,
        SYS_kill = 6,
        SYS_setxattr = 5,  // from rocket
        SYS_lsetxattr = 6, // from rocket
        SYS_fsetxattr = 8,
        SYS_getxattr = 9,   // from rocket
        SYS_lgetxattr = 7,  // from rocket
        SYS_fgetxattr = 10, // from rocket
        SYS_sleep = 13,
        SYS_uptime = 14,
        SYS_mknod = 16,
        SYS_getcwd = 17,
        SYS_eventfd2 = 19,
        SYS_epoll_create1 = 20,
        SYS_epoll_ctl = 21,
        SYS_dup = 23,
        SYS_dup3 = 24,
        SYS_fcntl = 25,
        SYS_ioctl = 29,
        SYS_flock = 32,
        SYS_mknodat = 33, // from rocket
        SYS_mkdirat = 34,
        SYS_unlinkat = 35,
        SYS_symlink = 88,   // symlink syscall
        SYS_symlinkat = 36, // from rocket
        SYS_linkat = 37,
        SYS_umount2 = 39,
        SYS_mount = 40,
        SYS_statfs = 43,    // form tsh
        SYS_fstatfs = 44,   // from rocket
        SYS_truncate = 45,  // from rocket
        SYS_ftruncate = 46, // form tsh
        SYS_fallocate = 47, // from rocket
        SYS_faccessat = 48, // form tsh
        SYS_chdir = 49,
        SYS_fchdir = 50,   // from rocket
        SYS_chroot = 51,   // from rocket
        SYS_fchmod = 52,   // from rocket
        SYS_fchmodat = 53, // from rocket
        SYS_fchownat = 54, // from rocket
        SYS_fchown = 55,   // from rocket
        SYS_exec = 55,     // Note: conflict with fchown, exec moved to 221
        SYS_openat = 56,
        SYS_close = 57,
        SYS_pipe2 = 59,
        SYS_getdents64 = 61,
        SYS_lseek = 62,
        SYS_read = 63,
        SYS_write = 64,
        SYS_readv = 65,
        SYS_writev = 66,
        SYS_pread64 = 67,  // form tsh
        SYS_pwrite64 = 68, // form tsh
        SYS_preadv = 69,   // from rocket
        SYS_pwritev = 70,  // from rocket
        SYS_sendfile = 71,
        SYS_pselect6 = 72, // form tsh
        SYS_ppoll = 73,
        SYS_splice = 76,
        SYS_readlinkat = 78,
        SYS_fstatat = 79,
        SYS_fstat = 80,
        SYS_sync = 81,            // form tsh
        SYS_fsync = 82,           // form tsh
        SYS_fdatasync = 83,       // form tsh
        SYS_sync_file_range = 84, // from rocket
        SYS_utimensat = 88,
        SYS_acct = 89, // from rocket
        SYS_exit = 93,
        SYS_exit_group = 94,
        SYS_waitid = 95,
        SYS_set_tid_address = 96,
        SYS_futex = 98, // form tsh
        SYS_set_robust_list = 99,
        SYS_get_robust_list = 100, // form tsh
        SYS_nanosleep = 101,
        SYS_setitimer = 103, // form tsh
        SYS_timer_create = 107,
        SYS_timer_settime = 110,
        SYS_timer_delete = 111,
        SYS_clock_settime = 112, // from rocket
        SYS_clock_gettime = 113,
        SYS_clock_getres = 114, // from rocket
        SYS_clock_nanosleep = 115,
        SYS_syslog = 116,
        SYS_ptrace = 117,             // from rocket
        SYS_sched_setscheduler = 119, // from rocket
        SYS_sched_getscheduler = 120, // from rocket
        SYS_sched_getparam = 121,     // from rocket
        SYS_sched_setaffinity = 122,  // from rocket
        SYS_sched_getaffinity = 123,  // form tsh
        SYS_sched_yield = 124,
        SYS_kill_signal = 129,
        SYS_tkill = 130,
        SYS_tgkill = 131,
        SYS_sigaltstack = 132,   // from rocket
        SYS_rt_sigsuspend = 133, // from rocket
        SYS_rt_sigaction = 134,
        SYS_rt_sigprocmask = 135,
        SYS_rt_sigpending = 136, // from rocket
        SYS_rt_sigtimedwait = 137,
        SYS_rt_sigqueueinfo = 138, // from rocket
        SYS_rt_sigreturn = 139,
        SYS_setpriority = 140,
        SYS_getpriority = 141,
        SYS_reboot = 142,
        SYS_setregrid = 143, // from rocket
        SYS_setgid = 144,
        SYS_setreuid = 145, // from rocket
        SYS_setuid = 146,
        SYS_setresuid = 147, // from rocket
        SYS_getresuid = 148, // from rocket
        SYS_setresgid = 149, // from rocket
        SYS_getresgid = 150, // from rocket
        SYS_setfsuid = 151,  // from rocket
        SYS_setfsgid = 152,  // from rocket
        SYS_times = 153,
        SYS_setpgid = 154,   // form tsh
        SYS_getpgid = 155,   // form tsh
        SYS_setsid = 157,    // form tsh
        SYS_getgroups = 158, // from rocket
        SYS_setgroups = 159, // from rocket
        SYS_uname = 160,
        SYS_sethostname = 161,   // from rocket
        SYS_setdomainname = 162, // from rocket
        SYS_getrusage = 165,     // form tsh
        SYS_umask = 166,         // from rocket
        SYS_prctl = 167,         // from rocket
        SYS_gettimeofday = 169,
        SYS_adjtimex = 171, // from rocket
        SYS_getpid = 172,
        SYS_getppid = 173,
        SYS_getuid = 174,
        SYS_geteuid = 175,
        SYS_getgid = 176,
        SYS_getegid = 177, // form tsh
        SYS_gettid = 178,
        SYS_sysinfo = 179,
        SYS_shmget = 194,          // form tsh
        SYS_shmctl = 195,          // form tsh
        SYS_shmat = 196,           // form tsh
        SYS_shmdt = 197,           // from rocket
        SYS_socket = 198,          // form tsh
        SYS_socketpair = 199,      // form tsh
        SYS_bind = 200,            // form tsh
        SYS_listen = 201,          // form tsh
        SYS_accept = 202,          // form tsh
        SYS_connect = 203,         // form tsh
        SYS_getsockname = 204,     // form tsh
        SYS_getpeername = 205,     // form tsh
        SYS_sendto = 206,          // form tsh
        SYS_recvfrom = 207,        // form tsh
        SYS_setsockopt = 208,      // form tsh
        SYS_getsockopt = 209,      // form tsh
        SYS_shutdown_socket = 210, // from rocket
        SYS_sendmsg = 211,         // form tsh
        SYS_recvmsg = 212,         // from rocket
        SYS_readahead = 213,
        SYS_brk = 214,
        SYS_munmap = 215,
        SYS_mremap = 216,
        SYS_clone = 220,
        SYS_execve = 221,
        SYS_mmap = 222,
        SYS_fadvise64 = 223, // from rocket
        SYS_mprotect = 226,  // form tsh
        SYS_msync = 227,     // from rocket
        SYS_mlock = 228,     // from rocket
        SYS_madvise = 233,
        SYS_remap_file_pages = 234, // from rocket
        SYS_get_mempolicy = 236,    // from rocket
        SYS_accept4 = 242,          // from rocket
        SYS_wait4 = 260,
        SYS_prlimit64 = 261,
        SYS_clockadjtime = 266, // from rocket
        SYS_renameat2 = 276,
        SYS_getrandom = 278,
        SYS_memfd_create = 279, 
        SYS_membarrier = 283,      // form tsh
        SYS_copy_file_range = 285, // from rocket
        SYS_statx = 291,
        SYS_strerror = 300,    // from rocket
        SYS_perror = 301,      // from rocket
        SYS_clone3 = 435,      // form tsh
        SYS_close_range = 436, // from rocket
        SYS_openat2 = 437,     // from rocket
        SYS_faccessat2 = 439,  // from rocket
        SYS_shutdown = 2025
    };

    enum SYS_clone
    {
                // Cloning flags as enum class for type safety
        CSIGNAL             = 0x000000ff, // Signal mask to be sent at exit.
        CLONE_VM            = 0x00000100, // Set if VM shared between processes.
        CLONE_FS            = 0x00000200, // Set if fs info shared between processes.
        CLONE_FILES         = 0x00000400, // Set if open files shared between processes.
        CLONE_SIGHAND       = 0x00000800, // Set if signal handlers shared.
        CLONE_PIDFD         = 0x00001000, // Set if a pidfd should be placed in parent.
        CLONE_PTRACE        = 0x00002000, // Set if tracing continues on the child.
        CLONE_VFORK         = 0x00004000, // Set if the parent wants the child to wake it up on mm_release.
        CLONE_PARENT        = 0x00008000, // Set if we want to have the same parent as the cloner.
        CLONE_THREAD        = 0x00010000, // Set to add to same thread group.
        CLONE_NEWNS         = 0x00020000, // Set to create new namespace.
        CLONE_SYSVSEM       = 0x00040000, // Set to shared SVID SEM_UNDO semantics.
        CLONE_SETTLS        = 0x00080000, // Set TLS info.
        CLONE_PARENT_SETTID = 0x00100000, // Store TID in userlevel buffer before MM copy.
        CLONE_CHILD_CLEARTID= 0x00200000, // Register exit futex and memory location to clear.
        CLONE_DETACHED      = 0x00400000, // Create clone detached.
        CLONE_UNTRACED      = 0x00800000, // Set if the tracing process can't force CLONE_PTRACE on this clone.
        CLONE_CHILD_SETTID  = 0x01000000, // Store TID in userlevel buffer in the child.
        CLONE_NEWCGROUP     = 0x02000000, // New cgroup namespace.
        CLONE_NEWUTS        = 0x04000000, // New utsname group.
        CLONE_NEWIPC        = 0x08000000, // New ipcs.
        CLONE_NEWUSER       = 0x10000000, // New user namespace.
        CLONE_NEWPID        = 0x20000000, // New pid namespace.
        CLONE_NEWNET        = 0x40000000, // New network namespace.
        CLONE_IO            = 0x80000000, // Clone I/O context.
        CLONE_NEWTIME       = 0x00000080  // New time namespace
    };
    enum SYS_wait
    {
        /* Bits in the third argument to `waitpid'.  */
        WNOHANG = 1,  /* Don't block waiting.  */
        WUNTRACED = 2 /* Report status of stopped children.  */
    };

    // getrandom flags
    enum SYS_getrandom_flags
    {
        GRND_NONBLOCK = 0x0001,  /* Don't block waiting for entropy */
        GRND_RANDOM   = 0x0002,  /* Use /dev/random source instead of /dev/urandom */
        GRND_INSECURE = 0x0004   /* Allow use of uninitialized entropy pool */
    };

    // // Use constexpr int SYS_for negative error codes instead of enum
    constexpr int SYS_EPERM = -1;           // 操作不允许（无权限）
    constexpr int SYS_ENOENT = -2;          // 文件或目录不存在
    constexpr int SYS_ESRCH = -3;           // 进程不存在
    constexpr int SYS_EINTR = -4;           // 系统调用被信号中断
    constexpr int SYS_EIO = -5;             // 输入/输出错误（底层硬件或设备故障）
    constexpr int SYS_ENXIO = -6;           // 设备或地址不存在
    constexpr int SYS_E2BIG = -7;           // 参数列表过长（如 execve 的参数）
    constexpr int SYS_ENOEXEC = -8;         // 可执行文件格式错误
    constexpr int SYS_EBADF = -9;           // 错误的文件描述符（未打开或无效）
    constexpr int SYS_ECHILD = -10;         // 无子进程（如 waitpid 无目标）
    constexpr int SYS_EAGAIN = -11;         // 资源暂时不可用（非阻塞操作未就绪），等同于 EWOULDBLOCK
    constexpr int SYS_ENOMEM = -12;         // 内存不足
    constexpr int SYS_EACCES = -13;         // 权限不足（文件访问被拒绝）
    constexpr int SYS_EFAULT = -14;         // 错误的地址（用户空间指针无效）
    constexpr int SYS_ENOTBLK = -15;        // 需要块设备（如对字符设备执行块操作）
    constexpr int SYS_EBUSY = -16;          // 设备或资源忙（如文件被锁定）
    constexpr int SYS_EEXIST = -17;         // 文件已存在（如创建已存在的文件）
    constexpr int SYS_EXDEV = -18;          // 跨设备链接（不允许跨文件系统硬链接）
    constexpr int SYS_ENODEV = -19;         // 设备不存在
    constexpr int SYS_ENOTDIR = -20;        // 不是目录（期望目录但提供的是文件）
    constexpr int SYS_EISDIR = -21;         // 是目录（期望文件但提供的是目录）
    constexpr int SYS_EINVAL = -22;         // 无效参数（如错误的标志值）
    constexpr int SYS_ENFILE = -23;         // 系统文件表溢出（全局文件描述符耗尽）
    constexpr int SYS_EMFILE = -24;         // 进程打开文件数超出限制
    constexpr int SYS_ENOTTY = -25;         // 不是终端设备（如对非终端调用 ioctl）
    constexpr int SYS_ETXTBSY = -26;        // 文本文件忙（如正在执行的共享库被修改）
    constexpr int SYS_EFBIG = -27;          // 文件过大（超出文件大小限制）
    constexpr int SYS_ENOSPC = -28;         // 设备空间不足（如磁盘写满）
    constexpr int SYS_ESPIPE = -29;         // 非法寻址（如对管道调用 lseek）
    constexpr int SYS_EROFS = -30;          // 只读文件系统（尝试修改只读挂载的文件系统）
    constexpr int SYS_EMLINK = -31;         // 链接数过多（文件系统限制）
    constexpr int SYS_EPIPE = -32;          // 管道破裂（写入无读取端的管道）
    constexpr int SYS_EDOM = -33;           // 数学参数超出函数定义域
    constexpr int SYS_ERANGE = -34;         // 数学结果不可表示（如溢出）
    constexpr int SYS_EDEADLK = -35;        // 资源死锁可能发生（如线程锁顺序问题）
    constexpr int SYS_ENAMETOOLONG = -36;   // 文件名过长（超出文件系统限制）
    constexpr int SYS_EOVERFLOW = -75;      // 值过大导致溢出
    constexpr int SYS_ENOLCK = -37;         // 无可用记录锁（文件锁资源耗尽）
    constexpr int SYS_ENOSYS = -38;         // 无效的系统调用号（如不存在的 syscall）
    constexpr int SYS_ENOTEMPTY = -39;      // 目录非空（如删除非空目录）
    constexpr int SYS_ELOOP = -40;          // 符号链接嵌套过深（可能形成环路）
    constexpr int SYS_ENOTSOCK = -88;       // 对非套接字执行套接字操作
    constexpr int SYS_EMSGSIZE = -90;       // 发送信息超过一次message最大内容
    constexpr int SYS_ENOPROTOOPT = -92;
    constexpr int SYS_EPROTONOSUPPORT = -93;// EPROTONOSUPPORT表示不支持所选的套接字协议
    constexpr int SYS_EOPNOTSUPP = -95;     // 操作不支持（如对普通文件调用套接字操作）
    constexpr int SYS_EAFNOSUPPORT = -97;   // address family 不支持
    constexpr int SYS_EADDRINUSE = -98;     // 套接字地址已在使用中（如端口被占用）
    constexpr int SYS_EADDRNOTAVAIL = -99;  // 地址不可用（如绑定到不存在的 IP）
    constexpr int SYS_ECONNABORTED = -103;
    constexpr int SYS_ECONNRESET = -104;    // 连接被重置（对端强制关闭）
    constexpr int SYS_EISCONN = -106;       // 传输端点已连接（如重复调用 connect）
    constexpr int SYS_ENOTCONN = -107;      // 套接字未连接（如未 connect 就 send）
    constexpr int SYS_ETIMEDOUT = -110;     // 操作超时（如网络请求未在指定时间内响应）
    constexpr int SYS_ECONNREFUSED = -111;  // 连接被拒绝（对端无监听服务）
    constexpr int SYS_EINPROGRESS = -115;   // 套接字为非阻塞模式且连接无法立即完成
    constexpr int SYS_ERESTARTSYS = -512;   // 内核自动重启系统调用
}