#import "../components/figure.typ": algorithm-figure, code-figure

= 现场赛题目分析
本节对题目统筹分析，并结合自己的内核实现，分析现场赛题目中需要重点实现的需求和目前欠缺的点。
== 基本加载
现场赛中有四个软件：Git、gcc、rustc和vim。我们需要在内核中实现对它们的支持。而四个软件的通用处理即为加载ELF文件并执行。ELF文件的加载主要分为以下几个步骤：
- 读取ELF文件头，检查文件格式是否正确。
- 读取程序头表，根据程序头表中的信息将各个段加载到内存中。
- 设置栈空间，准备好程序的运行环境。
- 跳转到程序的入口点，开始执行程序。
而这些文件在镜像中都是动态链接的，因此还需要加载动态链接器，并将动态链接器的路径传递给内核。需同时兼顾 QEMU 与物理板卡，页表与权限策略必须一致可复现。
动态链接器加载后，通常内核中观测到的行为是动态链接器会先执行，运行期频繁 `mmap` / `munmap` / `mprotect` / `brk`，并伴随按需装载、权限切换与 COW。，然后再跳转到程序的入口点执行程序的代码，程序的装载会频繁访问这些库，对它们分配的内存需要正确处理权限以及大小。
==  Git
现场赛中Git有两方面功能，对操作系统的文件系统相关功能以及网络相关功能的要求较高。
=== 文件系统
文件系统的主要功能是config、add、commit和log，这些功能都需要对文件系统进行读写操作。
- config：需要读取和写入配置文件，通常是一个文本文件。
- add：需要将文件添加到暂存区，通常是将文件复制到.git目录下的index文件中。
- commit：需要将暂存区的文件提交到版本库中，通常是将文件写入到.git目录下的objects目录中，并更新HEAD指针。
- log：需要读取提交记录，通常是读取.git目录下的logs目录中的文件。
这些操作都需要对文件系统进行读写操作，因此需要完整文件系统的完备性。至少需要`mkdir/rmdir`, `link/symlink/readlink`, `renameat2`（至少保证“原子重命名”语义），`getcwd`等系统调用的支持。
同时要求能够正确设置文件的权限和大小等元状态信息，并且能够正确处理符号链接等特殊文件： `stat/lstat/fstat`这类系统调用的支持也需要正确处理。  
在这之中，`.git/index` 的 锁文件约定（如 `index.lock`）是一种写入-同步-原子重命名，避免中断导致损坏。其在内核中的体现为open系统调用的各类标志位的支持，如 `O_EXCL`、`O_CREAT`、`O_TRUNC`等。
  
=== 网络
Git的网络功能主要是从远程git repo 执行clone操作，修改README，把更新后的本地仓库上传/下载一个对应远程网站的一个自己的远程仓库中。
这需要内核支持网络协议栈，能够正确处理TCP/IP协议，并且能够正确处理HTTP协议。
- clone：需要从远程仓库下载代码，通常是通过HTTP协议进行下载。
- push：需要将本地代码上传到远程仓库，通常是通过HTTP协议进行上传。
- pull：需要从远程仓库下载代码，通常是通过HTTP协议进行下载。
- remote：需要读取远程仓库的信息，通常是通过HTTP协议进行读取。
网络协议栈的基础框架需要支持TCP/IP协议，并且能够正确处理HTTP协议。需要能够正确处理网络连接的建立和断开，能够正确处理数据的发送和接收。
- *网络栈要点*
  - TCP：三次握手、拥塞与重传的基本闭环，超时/半关闭处理；  
  - DNS：如使用用户态解析器，确保 `getaddrinfo` 路径可用（文件或网络解析均可）；  
  - 定时器与可中断阻塞：`connect` 超时、`recv` 超时与 `EAGAIN` 语义一致。  
==  Vim
现场赛中Vim的主要功能是编辑文件，支持基本的文本编辑功能，包括
- 打开文件
- 保存文件
- 关闭文件
在正常使用vim时是从终端中打开的，需要内核支持终端设备的操作，能够正确处理终端设备的输入和输出。
Vim的编辑功能需要支持基本的文本编辑功能，包括插入、删除、复制、粘贴等操作。但现场赛题的需求是创建一个hello.c文件，并在其中写入一行代码，因此只需要支持插入和保存操作即可。
== GCC
现场赛中GCC的主要功能是编译C语言代码，支持基本的编译功能，包括
- 编译C语言代码
- 链接C语言代码
- 生成可执行文件
GCC的编译功能需要支持基本的C语言语法和语义，包括变量声明、函数定义、控制结构等。现场赛题的需求是编译一个hello.c文件，并生成一个可执行文件，此处代码为`printf("Hello World!\n");`，获取参数等编译步骤外，执行可执行文件、标准输出流的处理等都需要内核支持。
GCC的链接功能需要支持基本的链接功能，包括静态链接和动态链接。文件从`.o`文件链接到可执行文件，或从`.so`文件链接到可执行文件，需要支持gcc的链接器的运行。