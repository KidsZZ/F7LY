#import "../components/figure.typ": algorithm-figure, code-figure

= F7LY-OS内核概述

== F7LY内核的介绍

F7LY-OS是C++编写的支持RISC-V与LoongArch双架构的宏内核模块化操作系统，由来自武汉大学的三名队员使用C++从0参考xv6并改编、增加功能构建而成。使用分体的硬件抽象层实现架构无关的内核核心功能，进行多阶段启动，提供统一的进程管理，细粒度的内存资源动态管理，拥有统一接口的虚拟文件系统，可使用C++的多态特性支持fat32与ext4，以及基础的信号机制。开发过程的全部commit记录请参见原仓库地址#link("https://github.com/KidsZZ/F7LY-OS")[KidsZZ/F7LY-OS]。

F7LY使用模块化、面向对象的方式组织内核代码，将宏内核各个部分独立分成不同的模块。通过明确模块之间的接口，减少模块间的相互依赖和干扰，从而使内核代码复用成为可能，目标是提供功能与性能兼备的模块以及可读性强、可迁移性强的代码。

F7LY致力于实现高质量的代码，使内核充分发挥C++编译型语言的优点，接近硬件层的代码书写与直接操作内存的特性可更直观地操作内核中的资源管理。功能方面，实现了完整的C++ ABI支持，包括异常处理机制，支持标准POSIX系统调用；性能方面，通过懒分配和写时复制优化execve执行速度，使用页缓存加速文件读写，减少I/O访问次数。

F7LY严格遵循RISC-V与LoongArch的硬件标准与中断处理规范，使用统一的trap管理框架支持RISC-V PLIC和LoongArch的PLIC/ExtiOI中断控制器，来正确处理系统调用和各类例外与中断。系统调用严格按照System Calls Manual手册进行开发，确保实现的所有系统调用符合Linux raw syscall规范，为运行在F7LY的用户态程序提供了完备可靠的系统调用支持。

== 主要工作

=== 参考的代码

在F7LY项目的内核部分，我们对往年参赛团队的成果以及成熟的第三方库进行了深度移植与优化，以确保项目的高效性与可靠性。

- *XN6*：在LoongArch架构的支持方面，页表管理及硬件抽象层设计参考了2024年武汉大学团队的#link("https://gitlab.eduxiji.net/T202410486992576/OSKernel2024-2k1000la-xv6")[XN6]项目，实现了对LoongArch架构的高效适配。

- *xv6-2021*：异常处理机制及内核地址布局的设计，F7LY借鉴了MIT S081课程的#link("https://github.com/mit-pdos/xv6-public")[xv6-2021]，并移植了其物理内存管理的伙伴分配器算法，以提升内存分配的效率和稳定性。

- *EASTL*：在C++代码构建方面，由于内核环境不支持标准C++库（std），我们引入了EASTL库，以支持部分模块对高效数据结构的需求。

- *liballoc*：动态堆内存管理采用了Liballoc分配器库，经过集成与优化，确保了内核中内存分配的高效性与可扩展性。

- *lwext4*：文件系统部分，我们对原本为C语言编写的lwext4库进行了适配与重构，以满足内核环境对高性能文件操作的需求。

- *Open-NPStack*：网络栈则结合了VirtIO网络驱动与#link("https://gitee.com/Neo-T/open-npstack")[ONPS网络栈]，确保了在不同硬件平台上的网络通信能力。

- *oskernel-AVX*：移植自VisionFive2开发板上的sd卡驱动参考了2023年#link("https://gitlab.eduxiji.net/202310487101114/oskernel2023-avx")[SQL巨佬]队伍的实现，确保了对SD卡的高效访问。

=== 我们的工作

F7LY-OS的内核部分由三名成员共同完成，在参考前人工作的基础上，完全从零开始构建，团队成员经过多轮优化与完善，截至目前已完成超过700次的代码提交。

在初赛阶段，F7LY成功实现了LoongArch和RISC-V两种架构下的机器启动、中断处理、内存管理、进程调度及文件系统框架搭建与功能实现，并且成功实现了简易的信号处理机制。经过多轮测试验证，双架构均通过了初赛的basic测试、busybox测试、libctest大部分测试、libcbench测试和lua测试。此外，我们已完成60余个系统调用的功能实现，并且确保了这些调用在两种架构下的正确性。

在决赛阶段，F7LY的工作进一步扩展并深化，主要工作包括但不限于以下几个方面：

- *内存管理*：对内存布局进行了重大调整，修改了堆内存及物理内存的范围，并添加了共享内存区域。通过使用程序段的方法重新规划进程的地址空间，使得进程内存区域的管理更加科学合理。

- *进程管理*：重构了进程管理模块，根据进程的具体功能对其内存管理进行重新划分，使得进程内存管理更加清晰且模块化。新增了进程内存管理器，进一步提升了对进程内存的管理效率。

- *文件系统*：我们移除了之前功能不全的C++文件系统，成功移植了成熟的lwext4文件系统，并建立了VFS层来转发文件操作请求，确保了系统文件操作的可扩展性。

- *进程间通信*：构建了更加完整和强大的进程间通信机制，包括完善的信号机制、共享内存、匿名管道和有名管道、跨主机Socket通信等，为内核提供了更高效的进程间数据交换能力。

- *线程管理*：新增了线程支持，结合线程ID等字段实现了线程级管理，使得多线程操作在内核中得以顺畅执行。

- *系统调用完善*：在LTP测试过程中，依据Linux手册要求对系统调用进行进一步的错误处理与功能完善，至今已成功实现并验证了210余个系统调用。

- *硬件移植*：我们成功尝试移植F7LY内核至VisionFive2开发板，并在物理硬件环境中实现了内核的正确初始化与跳转至用户态。通过完善的SD卡驱动，我们成功实现了对硬盘存储数据的读写操作。

通过这些关键性的进展与优化，F7LY内核不仅在多架构、多模块的实现上实现了突破，同时也为未来的扩展与优化奠定了坚实的基础。

== 整体架构

#figure(
  image("fig/决赛整体架构.png", width: 100%),
  caption: [F7LY-OS整体架构图],
) <fig-overview-architecture>

kernel目录中对代码进行了模块化分区，支持双架构设计。

- *boot系统启动模块* - 负责内核的启动流程，包含RISC-V和LoongArch两种架构的启动代码，实现从bootloader到内核main函数的跳转，初始化基础硬件环境。

- *devs设备管理模块* - 实现统一的设备抽象层，包含字符设备、块设备、流设备等抽象类，提供设备管理器进行设备注册和管理，支持UART、控制台、磁盘等硬件设备。

- *fs文件系统模块* - 实现了VFS（虚拟文件系统）层，支持多种文件系统包括ext4、FAT、ramfs等，提供统一的文件操作接口，包含缓冲区管理、目录项缓存、inode管理等核心组件。

- *hal硬件抽象层* - 提供跨架构的硬件抽象，封装CPU相关操作和上下文切换，为上层模块提供统一的硬件接口，支持RISC-V和LoongArch双架构。

- *libs内核库模块* - 提供内核所需的基础库函数，包括字符串操作、打印输出、内存分配器、模板算法、C++运行时支持等，为内核其他模块提供基础服务。

- *mem内存管理模块* - 实现完整的内存管理体系，包含物理内存管理器（支持伙伴系统算法）、虚拟内存管理器、堆内存管理器、slab分配器等，提供高效的内存分配和回收机制。

- *shm共享内存模块* - 实现进程间共享内存机制，支持匿名共享内存和有名共享内存，提供高效的跨进程数据交换能力，包含共享内存分配、映射、同步等功能。

- *proc进程管理模块* - 实现进程创建、调度、同步等核心功能，包含进程管理器、调度器、信号处理、管道通信、锁机制等，支持多进程并发执行。

- *sys系统调用模块* - 实现系统调用处理机制，提供用户态程序与内核的交互接口，包含系统调用分发、参数传递、权限检查等功能。

- *trap中断与异常处理模块* - 处理硬件中断、异常和系统调用，实现中断向量表设置、异常处理流程、时钟中断管理等，支持双架构的不同中断机制。

- *tm时间管理模块* - 提供时间和定时器相关服务，实现定时器管理器、时间接口等，为进程调度和系统调用提供时间基础服务。

- *net网络模块* - 网络协议栈的基础框架以及VirtIO-Netdriver。

=== 项目目录结构

#code-figure(
```
F7LY-OS
├── build                           //工程构建文件
├── kernel                          //内核文件
│   ├── boot                        //内核入口以及主函数
│   ├── devs                        //设备驱动
│   ├── fs                          //文件系统
│   │   ├── drivers                 //硬盘等设备驱动
│   │   ├── lwext4                  //lwext4库
│   │   ├── linux                   //linux相关定义
│   │   └── vfs                     //虚拟文件系统
│   │       └── file                //用于继承的统一文件操作接口
│   ├── hal                         //与平台相关的寄存器定义
│   ├── libs                        //自定义的库操作支持
│   ├── link                        //链接脚本
│   ├── mem                         //内存管理
│   ├── shm                         //共享内存
│   ├── net                         //网络相关
│   ├── proc                        //进程调度与管理
│   ├── sys                         //系统调用
│   ├── tm                          //时钟
│   └── trap                        //中断处理
├── thirdparty                      //使用的第三方库
│   └── EASTL                       //EASTL库   
└── user                            //用户程序
└── Makefile
```,
caption: [F7LY-OS项目目录结构],
label-name: "code-project-structure"
)
