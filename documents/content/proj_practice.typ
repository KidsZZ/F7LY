= 工程实践
由于现场赛当天发布题目，内核环境不可能直接支持运行，需要支持现场赛的四种硬件环境，所以在比赛期间免不了调试和准备工作。本节介绍我们在比赛中使用的调试方法。
== 问题及对应处理方法
=== 运行时进程同步不一致
- *问题描述*
现场赛中gcc等软件的运行包含的线程数量较多，常常出现线程调度不一致的问题，导致同样的操作在不同的运行中出现不同的结果，并且使用fork创建的子进程在退出后其一些子进程没有被正确托孤，导致僵尸进程的出现。主要体现在`wait4`系统调用等待的子进程并非预期的子进程，导致一些进程卡死无法往下走。
- *解决方法*
  - 我们仔细阅读了linux标准的wait4行为，发现其行为是等待任意子进程退出，而不是等待特定的子进程退出。因此我们修改了内核中的wait4实现，使其能够正确处理任意子进程的退出。
  - 为了复刻真实的wait4行为，我们编译了一个git的运行脚本，在真实的linux环境中运行，观察其进程树和wait4调用的行为，并将其作为参考修改我们自己的内核，确保内核中的wait4实现与真实环境一致。
=== 运行中内存不足
- *问题描述*
现场赛中装载的动态链接库较多，且运行时频繁使用`brk`,`mmap`申请内存，导致内存不足的问题。主要体现在`mmap`系统调用返回`ENOMEM`错误，导致程序无法继续运行。
- *解决方法*
  - 经由调试日志打印，我们发现真正的问题在进程控制块中可存储的vma区域数量不足，导致无法为新的内存映射分配vma区域。而rustc装载的动态库较多，且每个动态库都需要一个vma区域，导致vma区域数量不足的问题。所以我们调整了vma的存储结构，从静态数组改为动态创建，确保能够存储足够多的vma区域。
  - 我们还增加了内存使用的调试日志，使用函数`print_detailed_memory_usage`打印内存使用情况，帮助我们更好地了解每一个进程的内存的使用情况，及时发现和解决内存不足的问题。
=== 懒分配页面的权限问题
- *问题描述*
现场赛中动态链接器和程序的运行时频繁使用`mmap`申请内存，并且这些内存区域通常是懒分配的，即在第一次访问时才真正分配物理页面并映射到虚拟地址空间中。而这些内存区域的权限通常是可读写的，不过动态链接库的代码权限通常是只读可执行的。因此在第一次访问这些懒分配页面时，可能会出现权限不匹配的问题，且分配可执行页面会带出更多的权限问题，导致程序无法继续运行。
- *解决方法*
  - 我们将页面分配逻辑根据缺页异常的类型不同进行区分，确保分配的页面权限与访问权限一致。对于可读写的页面，分配可读写的页面；对于只读可执行的页面，分配只读可执行的页面。这样可以确保在第一次访问懒分配页面时，权限匹配，避免权限不匹配的问题。
=== 用户态传入的缺页异常
- *问题描述*
用户态usertrap最常见的情况是缺页异常，这种问题经常在懒分配和写时拷贝逻辑中处理，但是一旦出现不包含在vma区域中的非法地址，就会导致内核发送`SIGSEGV`信号给用户态进程，进而导致进程崩溃。这种用户态的缺页地址总是无法预料的，且不便直接调试出现的原因。
- *解决方法*
  - 我们增加了内核中的调试日志，根据行为打印内存分配的详细记录，帮助我们更好地了解内存分配的过程，及时发现和解决问题。
  - 更根本的解决办法是编译了带符号表的动态链接库和程序，使用gdb进行调试，观察缺页异常发生时的调用栈和内存状态，帮助我们更好地了解问题的根本原因，并进行针对性的修改。这样的行为较为困难，需要在gdb中直接查看寄存器和内存状态，才能从中找到出现空指针和野指针的原因。
=== 开发板程序行为与QEMU不一致
- *问题描述*
现场赛中需要同时支持QEMU和物理开发板两种环境，而开发板在运行cpp软件时，在程序对齐和页面权限的处理上与QEMU存在差异，导致同样的操作在两种环境中出现不同的结果，且开发板的调试手段较为有限，无法直接使用gdb进行调试。
此处最主要的体现在于执行调度的`swtch`时，Context结构体存储的位置破坏了其他全局变量，进一步导致进程分布的pid等信息被破坏。
- *解决方法*
  - 我们仔细审查了代码，打印了可疑变量的地址和大小，发现Context结构体存储的位置与其他全局变量存在冲突，导致变量被破坏。在初始化Context结构体后，我们发现未使用过的寄存器被错误地存储，导致结构体没有完全紧密排放，后面的全局变量存储的位置位于Context结构体的中间，导致变量被破坏。
  - 在尝试多种解决方法后，我们最终选择在pcb的各种变量前面添加属性`__attribute__((aligned(16)))`，确保这些变量按16字节对齐存储，避免与Context结构体冲突。这样可以确保变量不被破坏，程序在两种环境中都能正确运行。