= 总结与展望

== 工作总结

+ 完成 RISC-V 与 LoongArch 双架构支持，包括：
  - 串口驱动；
  - PCI 设备管理；
  - 中断控制器配置；
  - 硬盘读写；
  - 并实现与硬件逻辑相匹配的中断处理流程。
  - 完成网络协议栈的驱动适配，支持 TCP/IP 协议栈的基本功能。

+ 通过面向对象设计，完成进程管理和内存管理模块，实现底层架构无关性，达到松耦合结构，为双架构扩展奠定基础，并支持线程任务的创建与调度。

+ 实现独立的虚拟文件系统层，成功将文件系统逻辑与内核解耦，并为支持更多文件系统格式提供继承接口。

+ 完成 Busybox 和 libc 的适配，补充和完善系统调用接口与相关功能。

+ 通过初步性能测试，验证系统具备良好的调度和 I/O 性能表现。

+ 多方法实现进程间通信（IPC）机制和信号处理功能，支持简单的进程协作。

+ 部分通过Linux Test Project（LTP）压力测试，验证内核稳定性和兼容性。

+ 构建多等级调试日志系统，并支持内核崩溃时打印调用栈回溯（backtrace）及参数信息，方便问题定位。

== 经验总结

+ 积累从零开始构建内核的系统化经验，包括：
  - 完成机器引导；
  - 初始化串口输出；
  - 搭建内存布局；
  - 编写中断处理；
  - 实现最小可用内核；
  - 逐步完善核心功能。

+ 系统调用的实现结合《System Calls Manual》和参考其他优秀项目成果，符合 Linux 原生 raw syscall 规范。

+ 不断积累调试经验，包括：
  - 用户态程序的单步调试；
  - 利用 GDB 跟踪调用栈；
  - 精准定位出错变量；
  - 依靠完善的日志获取运行期关键信息。

== 未来计划

+ 优化内存布局，进一步提升内存空间利用率。

+ 重构代码结构，提升代码可读性和可维护性。

+ 完善内核模块化设计，支持更多文件系统格式和设备驱动。

+ 增强进程间通信机制，支持更复杂的 IPC 模型，如消息队列、信号量等。

+ 完善多线程支持，优化线程调度算法，提升多核处理器性能。

+ 增强网络协议栈，支持更多协议和功能，如 IPv6、TLS 等。

+ 完善系统调用接口，确保与 Linux 兼容性，支持更多 POSIX 标准。

+ 完善硬件支持，争取能够在LoongArch和RISC-V物理硬件上适配运行。

+ 针对 Linux Test Project（LTP）压力测试结果，改进内核结构以提升稳定性和兼容性。
